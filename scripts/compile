#!/usr/bin/env ruby

require 'erb'

Dir.chdir File.dirname(__FILE__)
Dir.chdir '..'

MAC_OS = RbConfig::CONFIG['host_os'] =~ /darwin/ ? true : false
puts "Detected mac OS... prefixing exe calls with wine" if MAC_OS

class String
  def camelize
    self.downcase.split('_').to_a.map{|i|i.capitalize}.join
  end
  def to_boolean
    self == 'true'
  end
end

def load_all_helpers
  Dir.glob('helpers/*.rb') do |h|
    load h
    include Object.const_get File.basename(h, '.rb')
  end
end

class Assembler

  CLIJASSHELPER_EXE = "#{"wine " if MAC_OS}tools/jasshelper/clijasshelper.exe --scriptonly --debug #{File.expand_path "../tools/common.j", File.dirname(__FILE__)} #{File.expand_path "../tools/blizzard.j", File.dirname(__FILE__)} "

  @root
  @output
  @tmp_path
  @output_path
  @errors

  def extract_globals(path)
    File.open(path, 'r') do |f|
      @ids = f.read.scan(/constant \w{1,} (\w{1,}) *= *(\'[A-Za-z0-9]{4}\')/) || []
    end
  end

  def initialize(options = {:output => "tmp.j", })
    @root = Dir.getwd
    @tmp_path = "tmp_#{Time.now.strftime("%s")}.j"
    @output = File.open(@tmp_path, 'w')
    @output_path = "#{@root}/#{options[:output]}"
    @errors = []
    @compiled_by = options[:owner]
    @jasshelper = options[:do_jasshelper]
    @opt = options
  end

  def extract_jasshelper_errors(jasshelper_out)
    jasshelper_out.gsub! /\r\n?/, "\n"
    reasons = jasshelper_out.scan(/Line (\d*): *(.*)/).map{|i|{i[0].to_i => i[1]}}
    code    = jasshelper_out.scan(/(\d*) \| (.*\n)/).inject({}){|m,i|m.merge! Hash[i[0].to_i, i[1]]}
    reasons.each do |i|
      i = i.shift
      l = i[0]
      r = i[1]
      c = []
      o = l
      j = 1
      while code[l]
        c.push code[l]
        l += 1
      end
      l = o - 1
      while code[l]
        c.unshift code[l]
        l -= 1
        j += 1
      end
      @errors << {:reason => r, :lines => c, :fix_line => j, :line_number => o}
    end
  end

  def call_jasshelper
    jasshelper_out = `#{CLIJASSHELPER_EXE} #{@tmp_path} #{@output_path}`
    if $? == 0
      File.unlink @tmp_path
    else
      Dir.mkdir 'logs' unless File.exists? 'logs'
      File.open 'logs/jasshelper.log', 'a' do |f|
        f << "User " <<`whoami`
        f << "Compiling @ #{Time.now}" << "\n"
        f << `git log -1` << "\n"
        f << jasshelper_out << "\n"
      end
      extract_jasshelper_errors(jasshelper_out)
      puts "JASSHELPER ERROR: check logs..."
    end
  end

  def display_errors
    puts " mapscript: #{@tmp_path}, #{@errors.length} Compile Errors..."
    puts ""
    @errors.each_with_index do |error, i|
      if error[:lines].any?
        code = error[:lines].join
        msg  = "#{i+1} - Line #{error[:fix_line]}: #{error[:reason]}"
        puts "_" * msg.length
        puts msg
        puts "~" * msg.length
        puts code
        puts "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
      else
        puts "Line #{error[:line_number]}: #{error[:reason]}"
      end
    end
  end

  def compile
    close_output
    if @jasshelper
      call_jasshelper
    else
      `mv #{@tmp_path} #{@output_path}`
    end
    if @errors.any?
      display_errors
    else
      puts "Compilation success!"
      return 0
    end
  end

  def add_file(f)
    File.open(f, 'r') do |file|
      contents = file.read
      if File.extname(f) == ".erb"
        contents = ERB.new(contents, 0, '%<>').result(binding)
        f[".erb"] = ""
      end
      if File.extname(f) == ".j"
        @output << "\n" << contents
      elsif File.extname(f)  == ".zn"
        @output << "\n//! zinc\n"
        @output << contents << "\n"
        @output << "\n//! endzinc\n"
      end
    end
  end

  def assemble_dir(dir = @root)
    dir = File.expand_path dir
    Dir.chdir dir
    Dir.glob("*") do |f|
      if File.directory? f
        assemble_dir dir + "/" + f
        Dir.chdir dir
      else
        add_file(f)
      end
    end
    Dir.chdir @root
  end

  def add(path)
    if File.directory? path
      assemble_dir path
    elsif File.exists? path
      add_file path
    else
      raise "Path doesn't exist: #{path}"
    end
  end

  def close_output
    @output.close
  end

end

def extract_options(a)
  r = {}
  a.each do |i|
    o, v = i.split ':'
    r[o.to_sym] = v
  end
  r
end

default_file_order = [
  'lib',
  'init/map',
  'changelogs',
  'systems',
  'triggers',
  'bosses',
  'spells',
  'init/objects',
  'init/triggers/Custom Objects.j.erb',
  'init/triggers/Custom Triggers.j',
  'init/triggers/Main & Config.j'
]

opt = extract_options(ARGV)
opt = {
  :env           => opt[:env] || "test",
  :output        => opt[:out] || "out.j",
  :owner         => opt[:owner] || `whoami`.chomp.split("\\").last,
  :do_jasshelper => opt[:do_jasshelper] ? opt[:do_jasshelper].to_boolean : true,
  :build_order   => opt[:build_order] ? (File.exists?(opt[:build_order]) && !File.directory?(opt[:build_order]) ? File.read(opt[:build_order]) : opt[:build_order]).split(/,|\n/).map{|i|i.strip}.reject{|i|i.empty?} : default_file_order,
  :debug         => opt[:debug] ? opt[:debug].to_boolean : false
}
p opt if opt[:debug]

if ARGV[0] == 'help' || ARGV[0] == '--help'
  puts <<-EOS
Compiles src/(*.j|*.zn|*.*.erb) into a single map source file
Displays errors to stdout

Usage:
./compile [options]

Optional Options:
owner:(owner name)                         defaults `whoami`
out:(output filename)                      defaults out.j
debug:(whether to print script debug msgs) defaults false
build_order:(list paths relative to src/)  defaults\n#{default_file_order.join("\n")}

Example:
./compile owner:quazz out:itt.j build_order:one.j,two.j,aDir

EOS
  exit
end


itt_builder = Assembler.new(opt)

puts 'loading helpers...' if opt[:debug]
load_all_helpers
puts 'loaded helpers...' if opt[:debug]

itt_builder.extract_globals 'src/lib/ID.j'

opt[:build_order].each do |f|
  itt_builder.add "src/#{f}"
end

itt_builder.compile
